{"version":3,"file":"static/webpack/static/development/pages/index.js.cf82afb0e37bc87961dd.hot-update.js","sources":["webpack:///./components/control.js","webpack:///./pages/index.js"],"sourcesContent":["import { motion } from \"framer-motion\"\nimport { Icon } from 'antd';\nconst variants = {\n    hover: {\n        scale: 1.05\n    },\n    tap: {\n        scale: 0.95\n    }\n}\n\nfunction Control(props) {\n    return <motion.div\n        variants={variants}\n        whileHover=\"hover\"\n        whileTap=\"tap\"\n        className=\"controlStrip\" >\n\n        <Icon type={props.icon} />\n        props.children\n        </motion.div>\n}\n\nexport default Control","import YesButton from \"../components/yesbutton.js\";\nimport ColorPicker from \"../components/colorpicker.js\";\nimport FontPicker from \"../components/fontPicker\";\nimport cycleStates from \"../components/cycleStates.js\"\nimport Control from \"../components/control.js\"\nimport React, { useState, useEffect } from 'react';\nimport htmlToImage from 'html-to-image';\nimport download from 'downloadjs';\nimport { saveAs } from 'file-saver';\n// import domtoimage from 'dom-to-image';\nimport { Icon } from 'antd';\nimport innerHeight from 'ios-inner-height';\n\n\nimport { motion } from \"framer-motion\"\nvar i = 1;\n\nfunction HomePage() {\n\n    //states\n    const [font, setFont] = useState(\"NowTextBold\");\n    const [strokeWeight, setStrokeWeight] = useState(1);\n    const [sizeMultiplier, setSizeMultiplier] = useState(3);\n    const [shadow, setShadow] = useState(true);\n    const [clicked, setClicked] = useState(false);\n    const [isLockup, setLockup] = useState(false);\n    const [topColor, setTopColor] = useState({ r: '255', g: '255', b: '255', a: '0.3', });\n    const [bottomColor, setBottomColor] = useState({ r: '255', g: '255', b: '255', a: '0.3', });\n    const [color, setColor] = useState({ r: '255', g: '255', b: '255', a: '1', });\n    const [textOutlineColor, setTextOutlineColor] = useState({ r: '0', g: '0', b: '0', a: '1', });\n    const [borderColor, setBorderColor] = useState({ r: '0', g: '0', b: '0', a: '1', });\n\n\n    function setBothColors(json) {\n        setTopColor(json);\n        setBottomColor(json);\n    }\n\n\n\n    function playSequence() {\n        if (i < 3) {\n            setTopColor(cycleStates[i].topColor);\n            setBottomColor(cycleStates[i].bottomColor);\n            setColor(cycleStates[i].color);\n\n        } else {\n            setRandomColor()\n        }\n        i = i + 1;\n        if (i > 10) {\n            i = 0;\n        }\n\n    }\n\n    function resetColor() {\n        setBothColors({\n            r: 255, g: 255, b: 255, a: 0.3,\n        })\n        setColor({\n            r: 255, g: 255, b: 255, a: 1,\n        })\n\n    }\n\n    function setRandomColor() {\n        setBothColors({\n            r: Math.floor(Math.random() * 255),\n            g: Math.floor(Math.random() * 255),\n            b: Math.floor(Math.random() * 255),\n            a: '1',\n        })\n    }\n\n    function useSave() {\n\n        htmlToImage.toBlob(document.getElementById('stamp'), {})\n            .then(function (blob) {\n                download(blob, 'yesÂ®.png');\n            });\n\n    }\n\n\n\n\n\n    return <div>\n\n        <div style={{ height: `${innerHeight}px` }} className=\"main\">\n            <div className=\"canvas\">\n                {isLockup ? (\n                    <div id=\"stamp\"\n                        className=\"stampLockup\"\n                        style={{\n                            borderWidth: `${strokeWeight}px`,\n                            width: `${100 * sizeMultiplier + 35}px`,\n                            borderRadius: `${(100 * sizeMultiplier + 35) / 2.5 / 8}px`,\n                            fontSize: `${sizeMultiplier * 5}pt`,\n                            padding: `20px 12px 0px 10px`,\n                        }}>\n                        <div className=\"stamp-title\">The Open Banking Ecosystem</div>\n                        <YesButton shadow={shadow} sizeMultiplier={sizeMultiplier} strokeWeight={strokeWeight} clicked={clicked} font={font} topColor={topColor} textOutlineColor={textOutlineColor} bottomColor={bottomColor} color={color} borderColor={borderColor} />\n                    </div>\n                ) : (\n                        < div id=\"stamp\" className=\"stampButton\">\n                            <YesButton shadow={shadow} sizeMultiplier={sizeMultiplier} strokeWeight={strokeWeight} clicked={clicked} font={font} topColor={topColor} textOutlineColor={textOutlineColor} bottomColor={bottomColor} color={color} borderColor={borderColor} />\n                        </div>\n                    )}\n            </div>\n            <motion.div className=\"control\">\n                <motion.div className=\"controlStrip\">\n                    <ColorPicker className=\"colorPicker\" color={topColor} setColor={setBothColors} />\n                    Background\n\n            </motion.div>\n\n                <motion.div className=\"controlStrip\">\n                    <ColorPicker className=\"colorPicker\" color={color} setColor={setColor} />\n                    Typography\n            </motion.div>\n                <motion.div variants={variants} whileHover=\"hover\" whileTap=\"tap\" className=\"controlStrip\" onClick={() => playSequence()} ><Icon type=\"forward\" /> Cycle</motion.div>\n                <motion.div variants={variants} whileHover=\"hover\" whileTap=\"tap\" className=\"controlStrip\" onClick={() => resetColor()} ><Icon type=\"rollback\" /> Reset</motion.div>\n                <motion.div variants={variants} whileHover=\"hover\" whileTap=\"tap\" className=\"controlStrip\" onClick={() => setStrokeWeight((strokeWeight + 1) % 3 + 1)}><Icon type=\"edit\" /> Stroke Weight</motion.div>\n                <motion.div variants={variants} whileHover=\"hover\" whileTap=\"tap\" className=\"controlStrip\" onClick={() => setSizeMultiplier((sizeMultiplier + 1) % 10 + 1)}><Icon type=\"fullscreen\" /> Size</motion.div>\n                <motion.div variants={variants} whileHover=\"hover\" whileTap=\"tap\" className=\"controlStrip\" onClick={() => setShadow(!shadow)}><Icon type=\"border-top\" /> Shadow</motion.div>\n                <motion.div variants={variants} whileHover=\"hover\" whileTap=\"tap\" className=\"controlStrip\" onClick={() => setLockup(!isLockup)}><Icon type=\"border-outer\" /> Lockup</motion.div>\n                <motion.div variants={variants} whileHover=\"hover\" whileTap=\"tap\" className=\"controlStrip\" onClick={() => useSave()}><Icon type=\"download\" /> Download PNG</motion.div>\n\n            </motion.div>\n        </div>\n    </div >\n}\n\nexport default HomePage"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AACA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AACA;AADA;AAWA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AACA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;AACA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AAbA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}